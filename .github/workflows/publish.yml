name: CI + Publish

on:
  pull_request:
    branches: [main]
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore
        run: dotnet restore ./TravelDocFaker/TravelDocFaker.csproj

      - name: Build
        run: dotnet build ./TravelDocFaker/TravelDocFaker.csproj -c Release --no-restore

      - name: Publish test binaries
        run: dotnet publish ./TravelDocFakerTesting/TravelDocFakerTesting.csproj -c Release -o ./artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-test-binaries
          path: ./artifacts

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Download test binaries
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-test-binaries
          path: ./artifacts

      - name: Run tests (vstest)
        shell: bash
        run: |
          TESTDLL=$(find ./artifacts -name "TravelDocFakerTesting.dll" | head -n 1)
          if [ -z "$TESTDLL" ]; then echo "Test DLL not found"; exit 1; fi
          dotnet vstest "$TESTDLL" --logger:"trx;LogFileName=test-results.trx" /collect:"XPlat Code Coverage"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-test-results
          path: |
            **/test-results.trx
            **/coverage.cobertura.xml

  publish:
    name: Publish to NuGet
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Extract version from tag
        id: meta
        shell: bash
        run: |
          RAW="${GITHUB_REF_NAME}"
          VERSION="${RAW#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Restore
        run: dotnet restore ./TravelDocFaker/TravelDocFaker.csproj

      - name: Build
        run: dotnet build ./TravelDocFaker/TravelDocFaker.csproj -c Release --no-restore

      - name: Pack
        run: dotnet pack ./TravelDocFaker/TravelDocFaker.csproj -c Release --no-build -o ./artifacts /p:PackageVersion=${{ steps.meta.outputs.version }}

      - name: Publish to NuGet
        run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
