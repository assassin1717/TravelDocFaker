name: CI (build + test + bump)

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore
        run: dotnet restore ./TravelDocFaker/TravelDocFaker.csproj

      - name: Build
        run: dotnet build ./TravelDocFaker/TravelDocFaker.csproj -c Release --no-restore

      - name: Publish test binaries
        run: dotnet publish ./TravelDocFakerTesting/TravelDocFakerTesting.csproj -c Release -o ./artifacts

      - name: Upload test binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-test-binaries
          path: ./artifacts

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Download test binaries
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-test-binaries
          path: ./artifacts

      # Linux: usar bash + find
      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          TESTDLL=$(find ./artifacts -name "TravelDocFakerTesting.dll" | head -n 1)
          if [ -z "$TESTDLL" ]; then echo "Test DLL not found"; exit 1; fi
          dotnet vstest "$TESTDLL" --logger:"trx;LogFileName=test-results.trx" /collect:"XPlat Code Coverage"

      # Windows: usar PowerShell + Get-ChildItem
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $testDll = Get-ChildItem -Recurse -Filter TravelDocFakerTesting.dll -Path ./artifacts | Select-Object -First 1
          if (-not $testDll) { Write-Error "Test DLL not found"; exit 1 }
          dotnet vstest $testDll.FullName --logger:"trx;LogFileName=test-results.trx" /collect:"XPlat Code Coverage"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-test-results
          path: |
            **/test-results.trx
            **/coverage.cobertura.xml

  bump:
    name: Bump version & tag
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history for tagging)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET (optional but harmless)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Run bump-version-ci.ps1
        shell: pwsh
        run: ./bump-version-ci.ps1

  publish:
    name: Publish to NuGet
    needs: bump
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Read version from .csproj
        id: ver
        shell: pwsh
        run: |
          [xml]$x = Get-Content ./TravelDocFaker/TravelDocFaker.csproj
          $v = $x.Project.PropertyGroup.Version
          if (-not $v) { Write-Error "No <Version> in csproj after bump."; exit 1 }
          "version=$v" >> $env:GITHUB_OUTPUT

      - name: Restore
        run: dotnet restore ./TravelDocFaker/TravelDocFaker.csproj

      - name: Build (Release)
        run: dotnet build ./TravelDocFaker/TravelDocFaker.csproj -c Release --no-restore

      - name: Pack (use bumped version)
        run: dotnet pack ./TravelDocFaker/TravelDocFaker.csproj -c Release --no-build -o ./artifacts /p:PackageVersion=${{ steps.ver.outputs.version }}

      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push ./artifacts/*.nupkg --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json
